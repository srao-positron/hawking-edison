name: Deploy AWS Infrastructure

on:
  workflow_dispatch:
  workflow_call:  # Allow this to be called by other workflows

jobs:
  deploy-cdk:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: infrastructure/cdk/package-lock.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install CDK dependencies
        working-directory: infrastructure/cdk
        run: |
          npm ci
          npm install -g aws-cdk

      - name: Install Lambda dependencies
        working-directory: infrastructure/cdk/lambda
        run: npm ci

      - name: Build CDK
        working-directory: infrastructure/cdk
        run: npm run build

      - name: Deploy CDK stack
        working-directory: infrastructure/cdk
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          VAULT_STORE_SERVICE_KEY: ${{ secrets.VAULT_STORE_SERVICE_KEY }}
        run: |
          # Make deploy script executable
          chmod +x ./deploy.sh
          
          # Bootstrap CDK if needed
          npx cdk bootstrap || true
          
          # Deploy stack using deploy script to ensure proper env vars
          ./deploy.sh
          
          # Extract outputs from CDK
          npx cdk outputs --outputs-file outputs.json
          cat outputs.json

      - name: Display CDK outputs
        if: success()
        run: |
          # Extract values from CDK outputs
          SECRET_ARN=$(jq -r '.["HawkingEdisonStack-prod"].ApiKeysSecretArn' infrastructure/cdk/outputs.json)
          
          echo "::notice::AWS Secrets Manager ARN: $SECRET_ARN"
          echo "::notice::Infrastructure deployment successful!"

      - name: Update API keys in Secrets Manager
        if: success()
        run: |
          # Update the secrets with actual values
          aws secretsmanager update-secret \
            --secret-id hawking-edison/api-keys \
            --secret-string '{
              "SUPABASE_URL": "${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}",
              "SUPABASE_SERVICE_ROLE_KEY": "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}",
              "ANTHROPIC_API_KEY": "${{ secrets.ANTHROPIC_API_KEY }}",
              "OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}"
            }' || echo "Secret update failed - may need manual update"