"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = handler;
const client_secrets_manager_1 = require("@aws-sdk/client-secrets-manager");
const supabase_js_1 = require("@supabase/supabase-js");
const sdk_1 = require("@anthropic-ai/sdk");
const openai_1 = require("openai");
// Initialize AWS Secrets Manager
const secretsManager = new client_secrets_manager_1.SecretsManager({ region: process.env.AWS_REGION });
// Cache for secrets
let cachedSecrets = null;
let secretsExpiry = 0;
// Get secrets from AWS Secrets Manager
async function getSecrets() {
    const now = Date.now();
    if (cachedSecrets && now < secretsExpiry) {
        return cachedSecrets;
    }
    try {
        const response = await secretsManager.getSecretValue({
            SecretId: process.env.SECRETS_ARN,
        });
        cachedSecrets = JSON.parse(response.SecretString);
        secretsExpiry = now + 300000; // Cache for 5 minutes
        return cachedSecrets;
    }
    catch (error) {
        console.error('Failed to get secrets:', error);
        throw error;
    }
}
// Initialize clients
async function initializeClients() {
    const secrets = await getSecrets();
    const supabase = (0, supabase_js_1.createClient)(secrets.SUPABASE_URL, secrets.SUPABASE_SERVICE_ROLE_KEY);
    const anthropic = new sdk_1.default({
        apiKey: secrets.ANTHROPIC_API_KEY,
    });
    const openai = new openai_1.default({
        apiKey: secrets.OPENAI_API_KEY,
    });
    return { supabase, anthropic, openai };
}
// Process a single task
async function processTask(task) {
    const { supabase, anthropic, openai } = await initializeClients();
    try {
        // Update task status to processing
        await supabase
            .from('tasks')
            .update({
            status: 'processing',
            started_at: new Date().toISOString(),
        })
            .eq('id', task.id);
        let result;
        switch (task.type) {
            case 'simulation':
                result = await runSimulation(task, anthropic, supabase);
                break;
            case 'panel':
                result = await runPanel(task, anthropic, supabase);
                break;
            case 'discussion':
                result = await runDiscussion(task, anthropic, supabase);
                break;
            case 'analysis':
                result = await runAnalysis(task, anthropic, openai, supabase);
                break;
            default:
                throw new Error(`Unknown task type: ${task.type}`);
        }
        // Update task with results
        await supabase
            .from('tasks')
            .update({
            status: 'completed',
            result,
            completed_at: new Date().toISOString(),
        })
            .eq('id', task.id);
        return { success: true, data: result };
    }
    catch (error) {
        console.error(`Task ${task.id} failed:`, error);
        // Update task status to failed
        await supabase
            .from('tasks')
            .update({
            status: 'failed',
            error: error instanceof Error ? error.message : 'Unknown error',
            failed_at: new Date().toISOString(),
        })
            .eq('id', task.id);
        return {
            success: false,
            error: error instanceof Error ? error.message : 'Unknown error',
        };
    }
}
// Simulation logic
async function runSimulation(task, anthropic, supabase) {
    const { agents, topic, rounds } = task.config;
    const results = [];
    for (let round = 0; round < rounds; round++) {
        // Update progress
        await supabase
            .from('tasks')
            .update({
            progress: (round + 1) / rounds,
            current_round: round + 1,
        })
            .eq('id', task.id);
        // Run simulation round
        const roundResult = await anthropic.messages.create({
            model: 'claude-3-5-sonnet-20241022',
            max_tokens: 2000,
            messages: [
                {
                    role: 'user',
                    content: `Simulate round ${round + 1} of a ${topic} scenario with ${agents} agents.`,
                },
            ],
        });
        results.push({
            round: round + 1,
            content: roundResult.content[0].text || '',
        });
    }
    return { results, totalRounds: rounds };
}
// Panel discussion logic
async function runPanel(task, anthropic, supabase) {
    const { panelists, topic, duration } = task.config;
    // Create panel discussion
    const discussion = await anthropic.messages.create({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 4000,
        messages: [
            {
                role: 'user',
                content: `Create a panel discussion on "${topic}" with these panelists: ${panelists.join(', ')}. Duration: ${duration} minutes.`,
            },
        ],
    });
    return {
        topic,
        panelists,
        discussion: discussion.content[0].text || '',
        duration,
    };
}
// Discussion logic
async function runDiscussion(task, anthropic, supabase) {
    const { participants, topic, style } = task.config;
    const discussion = await anthropic.messages.create({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 3000,
        messages: [
            {
                role: 'user',
                content: `Create a ${style} discussion about "${topic}" between: ${participants.join(', ')}`,
            },
        ],
    });
    return {
        topic,
        participants,
        style,
        content: discussion.content[0].text || '',
    };
}
// Analysis logic (can use either Anthropic or OpenAI)
async function runAnalysis(task, anthropic, openai, supabase) {
    const { data, analysisType, provider = 'anthropic' } = task.config;
    let result;
    if (provider === 'openai') {
        const completion = await openai.chat.completions.create({
            model: 'gpt-4-turbo-preview',
            messages: [
                {
                    role: 'user',
                    content: `Perform a ${analysisType} analysis on: ${JSON.stringify(data)}`,
                },
            ],
        });
        result = completion.choices[0].message.content;
    }
    else {
        const response = await anthropic.messages.create({
            model: 'claude-3-5-sonnet-20241022',
            max_tokens: 3000,
            messages: [
                {
                    role: 'user',
                    content: `Perform a ${analysisType} analysis on: ${JSON.stringify(data)}`,
                },
            ],
        });
        result = response.content[0].text || '';
    }
    return {
        analysisType,
        provider,
        result,
    };
}
// Lambda handler
async function handler(event) {
    const results = [];
    for (const record of event.Records) {
        try {
            const message = JSON.parse(record.body);
            // Handle SNS message format
            const task = message.Message ? JSON.parse(message.Message) : message;
            console.log(`Processing task ${task.id} of type ${task.type}`);
            const result = await processTask(task);
            results.push({ messageId: record.messageId, ...result });
        }
        catch (error) {
            console.error('Failed to process record:', error);
            results.push({
                messageId: record.messageId,
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error',
            });
            // Don't throw - let SQS retry mechanism handle it
        }
    }
    // Return batch item failures for partial batch failure handling
    const failures = results
        .filter((r) => !r.success)
        .map((r) => ({ itemIdentifier: r.messageId }));
    return {
        batchItemFailures: failures,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay1wcm9jZXNzb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9sYW1iZGEvdGFzay1wcm9jZXNzb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUE2UkEsMEJBaUNDO0FBN1RELDRFQUFnRTtBQUNoRSx1REFBb0Q7QUFDcEQsMkNBQXlDO0FBQ3pDLG1DQUEyQjtBQUUzQixpQ0FBaUM7QUFDakMsTUFBTSxjQUFjLEdBQUcsSUFBSSx1Q0FBYyxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQTtBQUU3RSxvQkFBb0I7QUFDcEIsSUFBSSxhQUFhLEdBQVEsSUFBSSxDQUFBO0FBQzdCLElBQUksYUFBYSxHQUFHLENBQUMsQ0FBQTtBQW1CckIsdUNBQXVDO0FBQ3ZDLEtBQUssVUFBVSxVQUFVO0lBQ3ZCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQTtJQUN0QixJQUFJLGFBQWEsSUFBSSxHQUFHLEdBQUcsYUFBYSxFQUFFLENBQUM7UUFDekMsT0FBTyxhQUFhLENBQUE7SUFDdEIsQ0FBQztJQUVELElBQUksQ0FBQztRQUNILE1BQU0sUUFBUSxHQUFHLE1BQU0sY0FBYyxDQUFDLGNBQWMsQ0FBQztZQUNuRCxRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFZO1NBQ25DLENBQUMsQ0FBQTtRQUVGLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxZQUFhLENBQUMsQ0FBQTtRQUNsRCxhQUFhLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQSxDQUFDLHNCQUFzQjtRQUNuRCxPQUFPLGFBQWEsQ0FBQTtJQUN0QixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsd0JBQXdCLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDOUMsTUFBTSxLQUFLLENBQUE7SUFDYixDQUFDO0FBQ0gs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LFNBQVMsRUFBRSxHQUFHLE1BQU0sRUFBRSxDQUFDLENBQUE7UUFDMUQsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLDJCQUEyQixFQUFFLEtBQUssQ0FBQyxDQUFBO1lBQ2pELE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0JBQ1gsU0FBUyxFQUFFLE1BQU0sQ0FBQyxTQUFTO2dCQUMzQixPQUFPLEVBQUUsS0FBSztnQkFDZCxLQUFLLEVBQUUsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsZUFBZTthQUNoRSxDQUFDLENBQUE7WUFDRixrREFBa0Q7UUFDcEQsQ0FBQztJQUNILENBQUM7SUFFRCxnRUFBZ0U7SUFDaEUsTUFBTSxRQUFRLEdBQUcsT0FBTztTQUNyQixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztTQUN6QixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUVoRCxPQUFPO1FBQ0wsaUJBQWlCLEVBQUUsUUFBUTtLQUM1QixDQUFBO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNRU0V2ZW50LCBTUVNSZWNvcmQgfSBmcm9tICdhd3MtbGFtYmRhJ1xuaW1wb3J0IHsgU2VjcmV0c01hbmFnZXIgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtc2VjcmV0cy1tYW5hZ2VyJ1xuaW1wb3J0IHsgY3JlYXRlQ2xpZW50IH0gZnJvbSAnQHN1cGFiYXNlL3N1cGFiYXNlLWpzJ1xuaW1wb3J0IEFudGhyb3BpYyBmcm9tICdAYW50aHJvcGljLWFpL3NkaydcbmltcG9ydCBPcGVuQUkgZnJvbSAnb3BlbmFpJ1xuXG4vLyBJbml0aWFsaXplIEFXUyBTZWNyZXRzIE1hbmFnZXJcbmNvbnN0IHNlY3JldHNNYW5hZ2VyID0gbmV3IFNlY3JldHNNYW5hZ2VyKHsgcmVnaW9uOiBwcm9jZXNzLmVudi5BV1NfUkVHSU9OIH0pXG5cbi8vIENhY2hlIGZvciBzZWNyZXRzXG5sZXQgY2FjaGVkU2VjcmV0czogYW55ID0gbnVsbFxubGV0IHNlY3JldHNFeHBpcnkgPSAwXG5cbi8vIFRhc2sgdHlwZXNcbnR5cGUgVGFza1R5cGUgPSAnc2ltdWxhdGlvbicgfCAncGFuZWwnIHwgJ2Rpc2N1c3Npb24nIHwgJ2FuYWx5c2lzJ1xuXG5pbnRlcmZhY2UgVGFzayB7XG4gIGlkOiBzdHJpbmdcbiAgdXNlcklkOiBzdHJpbmdcbiAgdHlwZTogVGFza1R5cGVcbiAgY29uZmlnOiBhbnlcbiAgY3JlYXRlZEF0OiBzdHJpbmdcbn1cblxuaW50ZXJmYWNlIFRhc2tSZXN1bHQge1xuICBzdWNjZXNzOiBib29sZWFuXG4gIGRhdGE/OiBhbnlcbiAgZXJyb3I/OiBzdHJpbmdcbn1cblxuLy8gR2V0IHNlY3JldHMgZnJvbSBBV1MgU2VjcmV0cyBNYW5hZ2VyXG5hc3luYyBmdW5jdGlvbiBnZXRTZWNyZXRzKCkge1xuICBjb25zdCBub3cgPSBEYXRlLm5vdygpXG4gIGlmIChjYWNoZWRTZWNyZXRzICYmIG5vdyA8IHNlY3JldHNFeHBpcnkpIHtcbiAgICByZXR1cm4gY2FjaGVkU2VjcmV0c1xuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHNlY3JldHNNYW5hZ2VyLmdldFNlY3JldFZhbHVlKHtcbiAgICAgIFNlY3JldElkOiBwcm9jZXNzLmVudi5TRUNSRVRTX0FSTiEsXG4gICAgfSlcblxuICAgIGNhY2hlZFNlY3JldHMgPSBKU09OLnBhcnNlKHJlc3BvbnNlLlNlY3JldFN0cmluZyEpXG4gICAgc2VjcmV0c0V4cGlyeSA9IG5vdyArIDMwMDAwMCAvLyBDYWNoZSBmb3IgNSBtaW51dGVzXG4gICAgcmV0dXJuIGNhY2hlZFNlY3JldHNcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZ2V0IHNlY3JldHM6JywgZXJyb3IpXG4gICAgdGhyb3cgZXJyb3JcbiAgfVxufVxuXG4vLyBJbml0aWFsaXplIGNsaWVudHNcbmFzeW5jIGZ1bmN0aW9uIGluaXRpYWxpemVDbGllbnRzKCkge1xuICBjb25zdCBzZWNyZXRzID0gYXdhaXQgZ2V0U2VjcmV0cygpXG5cbiAgY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVDbGllbnQoXG4gICAgc2VjcmV0cy5TVVBBQkFTRV9VUkwsXG4gICAgc2VjcmV0cy5TVVBBQkFTRV9TRVJWSUNFX1JPTEVfS0VZXG4gIClcblxuICBjb25zdCBhbnRocm9waWMgPSBuZXcgQW50aHJvcGljKHtcbiAgICBhcGlLZXk6IHNlY3JldHMuQU5USFJPUElDX0FQSV9LRVksXG4gIH0pXG5cbiAgY29uc3Qgb3BlbmFpID0gbmV3IE9wZW5BSSh7XG4gICAgYXBpS2V5OiBzZWNyZXRzLk9QRU5BSV9BUElfS0VZLFxuICB9KVxuXG4gIHJldHVybiB7IHN1cGFiYXNlLCBhbnRocm9waWMsIG9wZW5haSB9XG59XG5cbi8vIFByb2Nlc3MgYSBzaW5nbGUgdGFza1xuYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc1Rhc2sodGFzazogVGFzayk6IFByb21pc2U8VGFza1Jlc3VsdD4ge1xuICBjb25zdCB7IHN1cGFiYXNlLCBhbnRocm9waWMsIG9wZW5haSB9ID0gYXdhaXQgaW5pdGlhbGl6ZUNsaWVudHMoKVxuXG4gIHRyeSB7XG4gICAgLy8gVXBkYXRlIHRhc2sgc3RhdHVzIHRvIHByb2Nlc3NpbmdcbiAgICBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oJ3Rhc2tzJylcbiAgICAgIC51cGRhdGUoe1xuICAgICAgICBzdGF0dXM6ICdwcm9jZXNzaW5nJyxcbiAgICAgICAgc3RhcnRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgfSlcbiAgICAgIC5lcSgnaWQnLCB0YXNrLmlkKVxuXG4gICAgbGV0IHJlc3VsdDogYW55XG5cbiAgICBzd2l0Y2ggKHRhc2sudHlwZSkge1xuICAgICAgY2FzZSAnc2ltdWxhdGlvbic6XG4gICAgICAgIHJlc3VsdCA9IGF3YWl0IHJ1blNpbXVsYXRpb24odGFzaywgYW50aHJvcGljLCBzdXBhYmFzZSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3BhbmVsJzpcbiAgICAgICAgcmVzdWx0ID0gYXdhaXQgcnVuUGFuZWwodGFzaywgYW50aHJvcGljLCBzdXBhYmFzZSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2Rpc2N1c3Npb24nOlxuICAgICAgICByZXN1bHQgPSBhd2FpdCBydW5EaXNjdXNzaW9uKHRhc2ssIGFudGhyb3BpYywgc3VwYWJhc2UpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdhbmFseXNpcyc6XG4gICAgICAgIHJlc3VsdCA9IGF3YWl0IHJ1bkFuYWx5c2lzKHRhc2ssIGFudGhyb3BpYywgb3BlbmFpLCBzdXBhYmFzZSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biB0YXNrIHR5cGU6ICR7dGFzay50eXBlfWApXG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIHRhc2sgd2l0aCByZXN1bHRzXG4gICAgYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKCd0YXNrcycpXG4gICAgICAudXBkYXRlKHtcbiAgICAgICAgc3RhdHVzOiAnY29tcGxldGVkJyxcbiAgICAgICAgcmVzdWx0LFxuICAgICAgICBjb21wbGV0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIH0pXG4gICAgICAuZXEoJ2lkJywgdGFzay5pZClcblxuICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGRhdGE6IHJlc3VsdCB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihgVGFzayAke3Rhc2suaWR9IGZhaWxlZDpgLCBlcnJvcilcblxuICAgIC8vIFVwZGF0ZSB0YXNrIHN0YXR1cyB0byBmYWlsZWRcbiAgICBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oJ3Rhc2tzJylcbiAgICAgIC51cGRhdGUoe1xuICAgICAgICBzdGF0dXM6ICdmYWlsZWQnLFxuICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcicsXG4gICAgICAgIGZhaWxlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgfSlcbiAgICAgIC5lcSgnaWQnLCB0YXNrLmlkKVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InLFxuICAgIH1cbiAgfVxufVxuXG4vLyBTaW11bGF0aW9uIGxvZ2ljXG5hc3luYyBmdW5jdGlvbiBydW5TaW11bGF0aW9uKFxuICB0YXNrOiBUYXNrLFxuICBhbnRocm9waWM6IEFudGhyb3BpYyxcbiAgc3VwYWJhc2U6IGFueVxuKTogUHJvbWlzZTxhbnk+IHtcbiAgY29uc3QgeyBhZ2VudHMsIHRvcGljLCByb3VuZHMgfSA9IHRhc2suY29uZmlnXG5cbiAgY29uc3QgcmVzdWx0cyA9IFtdXG5cbiAgZm9yIChsZXQgcm91bmQgPSAwOyByb3VuZCA8IHJvdW5kczsgcm91bmQrKykge1xuICAgIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICAgIGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbSgndGFza3MnKVxuICAgICAgLnVwZGF0ZSh7XG4gICAgICAgIHByb2dyZXNzOiAocm91bmQgKyAxKSAvIHJvdW5kcyxcbiAgICAgICAgY3VycmVudF9yb3VuZDogcm91bmQgKyAxLFxuICAgICAgfSlcbiAgICAgIC5lcSgnaWQnLCB0YXNrLmlkKVxuXG4gICAgLy8gUnVuIHNpbXVsYXRpb24gcm91bmRcbiAgICBjb25zdCByb3VuZFJlc3VsdCA9IGF3YWl0IGFudGhyb3BpYy5tZXNzYWdlcy5jcmVhdGUoe1xuICAgICAgbW9kZWw6ICdjbGF1ZGUtMy01LXNvbm5ldC0yMDI0MTAyMicsXG4gICAgICBtYXhfdG9rZW5zOiAyMDAwLFxuICAgICAgbWVzc2FnZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHJvbGU6ICd1c2VyJyxcbiAgICAgICAgICBjb250ZW50OiBgU2ltdWxhdGUgcm91bmQgJHtyb3VuZCArIDF9IG9mIGEgJHt0b3BpY30gc2NlbmFyaW8gd2l0aCAke2FnZW50c30gYWdlbnRzLmAsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pXG5cbiAgICByZXN1bHRzLnB1c2goe1xuICAgICAgcm91bmQ6IHJvdW5kICsgMSxcbiAgICAgIGNvbnRlbnQ6IChyb3VuZFJlc3VsdC5jb250ZW50WzBdIGFzIGFueSkudGV4dCB8fCAnJyxcbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIHsgcmVzdWx0cywgdG90YWxSb3VuZHM6IHJvdW5kcyB9XG59XG5cbi8vIFBhbmVsIGRpc2N1c3Npb24gbG9naWNcbmFzeW5jIGZ1bmN0aW9uIHJ1blBhbmVsKFxuICB0YXNrOiBUYXNrLFxuICBhbnRocm9waWM6IEFudGhyb3BpYyxcbiAgc3VwYWJhc2U6IGFueVxuKTogUHJvbWlzZTxhbnk+IHtcbiAgY29uc3QgeyBwYW5lbGlzdHMsIHRvcGljLCBkdXJhdGlvbiB9ID0gdGFzay5jb25maWdcblxuICAvLyBDcmVhdGUgcGFuZWwgZGlzY3Vzc2lvblxuICBjb25zdCBkaXNjdXNzaW9uID0gYXdhaXQgYW50aHJvcGljLm1lc3NhZ2VzLmNyZWF0ZSh7XG4gICAgbW9kZWw6ICdjbGF1ZGUtMy01LXNvbm5ldC0yMDI0MTAyMicsXG4gICAgbWF4X3Rva2VuczogNDAwMCxcbiAgICBtZXNzYWdlczogW1xuICAgICAge1xuICAgICAgICByb2xlOiAndXNlcicsXG4gICAgICAgIGNvbnRlbnQ6IGBDcmVhdGUgYSBwYW5lbCBkaXNjdXNzaW9uIG9uIFwiJHt0b3BpY31cIiB3aXRoIHRoZXNlIHBhbmVsaXN0czogJHtwYW5lbGlzdHMuam9pbihcbiAgICAgICAgICAnLCAnXG4gICAgICAgICl9LiBEdXJhdGlvbjogJHtkdXJhdGlvbn0gbWludXRlcy5gLFxuICAgICAgfSxcbiAgICBdLFxuICB9KVxuXG4gIHJldHVybiB7XG4gICAgdG9waWMsXG4gICAgcGFuZWxpc3RzLFxuICAgIGRpc2N1c3Npb246IChkaXNjdXNzaW9uLmNvbnRlbnRbMF0gYXMgYW55KS50ZXh0IHx8ICcnLFxuICAgIGR1cmF0aW9uLFxuICB9XG59XG5cbi8vIERpc2N1c3Npb24gbG9naWNcbmFzeW5jIGZ1bmN0aW9uIHJ1bkRpc2N1c3Npb24oXG4gIHRhc2s6IFRhc2ssXG4gIGFudGhyb3BpYzogQW50aHJvcGljLFxuICBzdXBhYmFzZTogYW55XG4pOiBQcm9taXNlPGFueT4ge1xuICBjb25zdCB7IHBhcnRpY2lwYW50cywgdG9waWMsIHN0eWxlIH0gPSB0YXNrLmNvbmZpZ1xuXG4gIGNvbnN0IGRpc2N1c3Npb24gPSBhd2FpdCBhbnRocm9waWMubWVzc2FnZXMuY3JlYXRlKHtcbiAgICBtb2RlbDogJ2NsYXVkZS0zLTUtc29ubmV0LTIwMjQxMDIyJyxcbiAgICBtYXhfdG9rZW5zOiAzMDAwLFxuICAgIG1lc3NhZ2VzOiBbXG4gICAgICB7XG4gICAgICAgIHJvbGU6ICd1c2VyJyxcbiAgICAgICAgY29udGVudDogYENyZWF0ZSBhICR7c3R5bGV9IGRpc2N1c3Npb24gYWJvdXQgXCIke3RvcGljfVwiIGJldHdlZW46ICR7cGFydGljaXBhbnRzLmpvaW4oXG4gICAgICAgICAgJywgJ1xuICAgICAgICApfWAsXG4gICAgICB9LFxuICAgIF0sXG4gIH0pXG5cbiAgcmV0dXJuIHtcbiAgICB0b3BpYyxcbiAgICBwYXJ0aWNpcGFudHMsXG4gICAgc3R5bGUsXG4gICAgY29udGVudDogKGRpc2N1c3Npb24uY29udGVudFswXSBhcyBhbnkpLnRleHQgfHwgJycsXG4gIH1cbn1cblxuLy8gQW5hbHlzaXMgbG9naWMgKGNhbiB1c2UgZWl0aGVyIEFudGhyb3BpYyBvciBPcGVuQUkpXG5hc3luYyBmdW5jdGlvbiBydW5BbmFseXNpcyhcbiAgdGFzazogVGFzayxcbiAgYW50aHJvcGljOiBBbnRocm9waWMsXG4gIG9wZW5haTogT3BlbkFJLFxuICBzdXBhYmFzZTogYW55XG4pOiBQcm9taXNlPGFueT4ge1xuICBjb25zdCB7IGRhdGEsIGFuYWx5c2lzVHlwZSwgcHJvdmlkZXIgPSAnYW50aHJvcGljJyB9ID0gdGFzay5jb25maWdcblxuICBsZXQgcmVzdWx0XG5cbiAgaWYgKHByb3ZpZGVyID09PSAnb3BlbmFpJykge1xuICAgIGNvbnN0IGNvbXBsZXRpb24gPSBhd2FpdCBvcGVuYWkuY2hhdC5jb21wbGV0aW9ucy5jcmVhdGUoe1xuICAgICAgbW9kZWw6ICdncHQtNC10dXJiby1wcmV2aWV3JyxcbiAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICByb2xlOiAndXNlcicsXG4gICAgICAgICAgY29udGVudDogYFBlcmZvcm0gYSAke2FuYWx5c2lzVHlwZX0gYW5hbHlzaXMgb246ICR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgICBkYXRhXG4gICAgICAgICAgKX1gLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KVxuXG4gICAgcmVzdWx0ID0gY29tcGxldGlvbi5jaG9pY2VzWzBdLm1lc3NhZ2UuY29udGVudFxuICB9IGVsc2Uge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYW50aHJvcGljLm1lc3NhZ2VzLmNyZWF0ZSh7XG4gICAgICBtb2RlbDogJ2NsYXVkZS0zLTUtc29ubmV0LTIwMjQxMDIyJyxcbiAgICAgIG1heF90b2tlbnM6IDMwMDAsXG4gICAgICBtZXNzYWdlczogW1xuICAgICAgICB7XG4gICAgICAgICAgcm9sZTogJ3VzZXInLFxuICAgICAgICAgIGNvbnRlbnQ6IGBQZXJmb3JtIGEgJHthbmFseXNpc1R5cGV9IGFuYWx5c2lzIG9uOiAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgZGF0YVxuICAgICAgICAgICl9YCxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSlcblxuICAgIHJlc3VsdCA9IChyZXNwb25zZS5jb250ZW50WzBdIGFzIGFueSkudGV4dCB8fCAnJ1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBhbmFseXNpc1R5cGUsXG4gICAgcHJvdmlkZXIsXG4gICAgcmVzdWx0LFxuICB9XG59XG5cbi8vIExhbWJkYSBoYW5kbGVyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihldmVudDogU1FTRXZlbnQpIHtcbiAgY29uc3QgcmVzdWx0cyA9IFtdXG5cbiAgZm9yIChjb25zdCByZWNvcmQgb2YgZXZlbnQuUmVjb3Jkcykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gSlNPTi5wYXJzZShyZWNvcmQuYm9keSlcbiAgICAgIFxuICAgICAgLy8gSGFuZGxlIFNOUyBtZXNzYWdlIGZvcm1hdFxuICAgICAgY29uc3QgdGFzayA9IG1lc3NhZ2UuTWVzc2FnZSA/IEpTT04ucGFyc2UobWVzc2FnZS5NZXNzYWdlKSA6IG1lc3NhZ2VcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coYFByb2Nlc3NpbmcgdGFzayAke3Rhc2suaWR9IG9mIHR5cGUgJHt0YXNrLnR5cGV9YClcbiAgICAgIFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJvY2Vzc1Rhc2sodGFzaylcbiAgICAgIHJlc3VsdHMucHVzaCh7IG1lc3NhZ2VJZDogcmVjb3JkLm1lc3NhZ2VJZCwgLi4ucmVzdWx0IH0pXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBwcm9jZXNzIHJlY29yZDonLCBlcnJvcilcbiAgICAgIHJlc3VsdHMucHVzaCh7XG4gICAgICAgIG1lc3NhZ2VJZDogcmVjb3JkLm1lc3NhZ2VJZCxcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJyxcbiAgICAgIH0pXG4gICAgICAvLyBEb24ndCB0aHJvdyAtIGxldCBTUVMgcmV0cnkgbWVjaGFuaXNtIGhhbmRsZSBpdFxuICAgIH1cbiAgfVxuXG4gIC8vIFJldHVybiBiYXRjaCBpdGVtIGZhaWx1cmVzIGZvciBwYXJ0aWFsIGJhdGNoIGZhaWx1cmUgaGFuZGxpbmdcbiAgY29uc3QgZmFpbHVyZXMgPSByZXN1bHRzXG4gICAgLmZpbHRlcigocikgPT4gIXIuc3VjY2VzcylcbiAgICAubWFwKChyKSA9PiAoeyBpdGVtSWRlbnRpZmllcjogci5tZXNzYWdlSWQgfSkpXG5cbiAgcmV0dXJuIHtcbiAgICBiYXRjaEl0ZW1GYWlsdXJlczogZmFpbHVyZXMsXG4gIH1cbn0iXX0=